import { Telegraf } from "telegraf";
import fetch from "node-fetch";
import WebSocket from "ws";
import dotenv from "dotenv";
import fs from "fs/promises";

dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
let WALLET_ADDRESSES = [];
let wsConnected = false;
let ws;

async function updateWalletAddresses() {
  const wallets = await loadWallets();
  WALLET_ADDRESSES = wallets.wallets;

  // N·∫øu WebSocket ƒëang k·∫øt n·ªëi, ƒëƒÉng k√Ω l·∫°i subscription v·ªõi danh s√°ch v√≠ m·ªõi
  if (wsConnected && ws.readyState === WebSocket.OPEN) {
    ws.send(
      JSON.stringify({
        jsonrpc: "2.0",
        id: 1,
        method: "logsSubscribe",
        params: [{ mentions: WALLET_ADDRESSES }, { commitment: "confirmed" }],
      })
    );
  }
}

// C·∫≠p nh·∫≠t danh s√°ch v√≠ khi kh·ªüi ƒë·ªông
await updateWalletAddresses();

const RPC_URL = "wss://api.mainnet-beta.solana.com"; // WebSocket RPC

const bot = new Telegraf(BOT_TOKEN);

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
const RECONNECT_INTERVAL = 5000; // 5 gi√¢y

function connectWebSocket() {
  const ws = new WebSocket(RPC_URL);

  // Th√™m bi·∫øn ƒë·ªÉ theo d√µi interval ping
  let pingInterval;

  ws.on("open", () => {
    console.log("WebSocket connected to Solana");
    wsConnected = true;
    reconnectAttempts = 0;

    // Thi·∫øt l·∫≠p ping m·ªói 30 gi√¢y
    pingInterval = setInterval(() => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.ping();
        console.log("Ping sent to keep connection alive");
      }
    }, 30000);

    // ƒêƒÉng k√Ω theo d√µi c√°c v√≠
    ws.send(
      JSON.stringify({
        jsonrpc: "2.0",
        id: 1,
        method: "logsSubscribe",
        params: [{ mentions: WALLET_ADDRESSES }, { commitment: "confirmed" }],
      })
    );
  });

  ws.on("close", () => {
    console.log("WebSocket closed");
    wsConnected = false;

    // X√≥a interval ping khi ƒë√≥ng k·∫øt n·ªëi
    if (pingInterval) {
      clearInterval(pingInterval);
    }

    // Th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu ch∆∞a v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠
    if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
      reconnectAttempts++;
      console.log(`ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i l·∫ßn ${reconnectAttempts}...`);
      setTimeout(connectWebSocket, RECONNECT_INTERVAL);
    } else {
      console.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i sau nhi·ªÅu l·∫ßn th·ª≠");
      // G·ª≠i th√¥ng b√°o v·ªÅ Telegram
      bot.telegram.sendMessage(
        CHAT_ID,
        "‚ùå Bot m·∫•t k·∫øt n·ªëi v·ªõi Solana. Vui l√≤ng ki·ªÉm tra l·∫°i!"
      );
    }
  });

  // Th√™m handler cho pong
  ws.on("pong", () => {
    console.log("Received pong from server");
  });

  // Gi·ªØ nguy√™n c√°c handler kh√°c
  ws.on("message", async (data) => {
    const response = JSON.parse(data);
    if (response.method === "logsNotification") {
      const { signature, logs } = response.params.result.value;

      // T√¨m ƒë·ªãa ch·ªâ v√≠ li√™n quan ƒë·∫øn giao d·ªãch n√†y
      const involvedAddresses = WALLET_ADDRESSES.filter((addr) =>
        logs.some((log) => log.includes(addr))
      );

      // T·∫°o link Solscan
      const solscanLink = `https://solscan.io/tx/${signature}`;

      // Message v·ªõi th√¥ng tin v·ªÅ v√≠ li√™n quan
      const message =
        `üîî Ph√°t hi·ªán giao d·ªãch m·ªõi!\n` +
        `V√≠ li√™n quan: ${involvedAddresses.join(", ")}\n` +
        `[Xem chi ti·∫øt tr√™n Solscan](${solscanLink})`;

      try {
        await bot.telegram.sendMessage(CHAT_ID, message, {
          parse_mode: "Markdown",
          disable_web_page_preview: false,
        });
      } catch (error) {
        console.error("L·ªói g·ª≠i tin nh·∫Øn:", error);
        await bot.telegram.sendMessage(
          CHAT_ID,
          `Giao d·ªãch m·ªõi cho v√≠ ${involvedAddresses.join(", ")}: ${solscanLink}`
        );
      }
    }
  });

  ws.on("error", (err) => {
    console.error("WebSocket error:", err);
    wsConnected = false;
  });

  return ws;
}

// Kh·ªüi t·∫°o k·∫øt n·ªëi WebSocket
ws = connectWebSocket();

// Kh·ªüi ch·∫°y bot ƒë·ªÉ c√≥ th·ªÉ nh·∫≠n l·ªánh t·ª´ Telegram (n·∫øu c·∫ßn)
bot.start((ctx) => ctx.reply("Bot ƒëang theo d√µi giao d·ªãch v√≠ tr√™n Solana!"));
bot.launch();

console.log("Bot Telegram ƒëang ch·∫°y...");

const WALLETS_FILE = "wallets.json";

// H√†m ƒë·ªçc danh s√°ch v√≠
async function loadWallets() {
  try {
    const data = await fs.readFile(WALLETS_FILE, "utf8");
    return JSON.parse(data);
  } catch (error) {
    return { wallets: [] };
  }
}

// H√†m l∆∞u danh s√°ch v√≠
async function saveWallets(wallets) {
  await fs.writeFile(WALLETS_FILE, JSON.stringify(wallets, null, 2));
}

// Th√™m c√°c l·ªánh x·ª≠ l√Ω cho bot
bot.command("add_wallet", async (ctx) => {
  const wallet_address = ctx.message.text.split(" ")[1];
  if (!wallet_address) {
    return ctx.reply("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠. V√≠ d·ª•: /add_wallet <ƒë·ªãa_ch·ªâ>");
  }

  const wallets = await loadWallets();
  if (!wallets.wallets.includes(wallet_address)) {
    wallets.wallets.push(wallet_address);
    await saveWallets(wallets);
    await updateWalletAddresses(); // C·∫≠p nh·∫≠t v√† ƒëƒÉng k√Ω l·∫°i subscription
    ctx.reply("ƒê√£ th√™m ƒë·ªãa ch·ªâ v√≠ th√†nh c√¥ng! ‚úÖ");
  } else {
    ctx.reply("ƒê·ªãa ch·ªâ v√≠ n√†y ƒë√£ t·ªìn t·∫°i! ‚ö†Ô∏è");
  }
});

bot.command("remove_wallet", async (ctx) => {
  const wallet_address = ctx.message.text.split(" ")[1];
  if (!wallet_address) {
    return ctx.reply(
      "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ v√≠. V√≠ d·ª•: /remove_wallet <ƒë·ªãa_ch·ªâ>"
    );
  }

  const wallets = await loadWallets();
  const index = wallets.wallets.indexOf(wallet_address);
  if (index > -1) {
    wallets.wallets.splice(index, 1);
    await saveWallets(wallets);
    await updateWalletAddresses(); // C·∫≠p nh·∫≠t v√† ƒëƒÉng k√Ω l·∫°i subscription
    ctx.reply("ƒê√£ x√≥a ƒë·ªãa ch·ªâ v√≠ th√†nh c√¥ng! ‚úÖ");
  } else {
    ctx.reply("Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ v√≠ n√†y! ‚ùå");
  }
});

bot.command("list_wallets", async (ctx) => {
  const wallets = await loadWallets();
  if (wallets.wallets.length === 0) {
    ctx.reply("Ch∆∞a c√≥ ƒë·ªãa ch·ªâ v√≠ n√†o ƒë∆∞·ª£c th√™m v√†o! üìù");
  } else {
    const walletList = wallets.wallets
      .map((w, i) => `${i + 1}. ${w}`)
      .join("\n");
    ctx.reply(`Danh s√°ch c√°c v√≠ ƒëang theo d√µi:\n${walletList}`);
  }
});
