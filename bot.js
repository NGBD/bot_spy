import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";
import process from "process";

dotenv.config();

if (!process.env.BOT_TOKEN || !process.env.GEMINI_API_KEY) {
  console.error("Thi·∫øu th√¥ng tin trong file .env! Vui l√≤ng ki·ªÉm tra l·∫°i.");
  process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: true,
});

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
  generationConfig: {
    temperature: 0.7,
    topK: 40,
    topP: 0.95,
    maxOutputTokens: 1024,
  },
});

// L∆∞u tr·ªØ th√¥ng tin ng∆∞·ªùi d√πng
const userData = new Map();

// L∆∞u tr·ªØ tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
const userState = new Map();

const SYSTEM_PROMPT = `B·∫°n l√† m·ªôt chuy√™n gia dinh d∆∞·ª°ng c√≥ nhi·ªÅu nƒÉm kinh nghi·ªám. 
H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ dinh d∆∞·ª°ng, s·ª©c kh·ªèe v√† ch·∫ø ƒë·ªô ƒÉn u·ªëng m·ªôt c√°ch chuy√™n nghi·ªáp v√† khoa h·ªçc.
Lu√¥n ƒë∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n c√°c nghi√™n c·ª©u khoa h·ªçc v√† h∆∞·ªõng d·∫´n dinh d∆∞·ª°ng ch√≠nh th·ªëng.
N·∫øu kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ th√¥ng tin, h√£y n√≥i r√µ ƒëi·ªÅu ƒë√≥ v√† khuy·∫øn ngh·ªã ng∆∞·ªùi d√πng tham kh·∫£o √Ω ki·∫øn chuy√™n gia y t·∫ø.
H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† s·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, g·∫ßn g≈©i.`;

// H·∫±ng s·ªë cho t√≠nh to√°n
const ACTIVITY_LEVELS = {
  sedentary: 1.2, // √çt v·∫≠n ƒë·ªông
  light: 1.375, // V·∫≠n ƒë·ªông nh·∫π
  moderate: 1.55, // V·∫≠n ƒë·ªông v·ª´a
  active: 1.725, // V·∫≠n ƒë·ªông nhi·ªÅu
  very_active: 1.9, // V·∫≠n ƒë·ªông r·∫•t nhi·ªÅu
};

function calculateBMR(weight, height, age, gender) {
  // C√¥ng th·ª©c Mifflin-St Jeor
  if (gender === "male") {
    return 10 * weight + 6.25 * height - 5 * age + 5;
  } else {
    return 10 * weight + 6.25 * height - 5 * age - 161;
  }
}

function calculateTDEE(bmr, activityLevel) {
  return bmr * activityLevel;
}

function calculateBodyFat(weight, height, age, gender, bmi) {
  // C√¥ng th·ª©c Deurenberg
  return 1.2 * bmi + 0.23 * age - 10.8 * (gender === "male" ? 1 : 0) - 5.4;
}

function calculateIdealWeight(height, gender) {
  // C√¥ng th·ª©c Hamwi
  if (gender === "male") {
    return 48 + 2.7 * ((height - 152.4) / 2.54);
  } else {
    return 45.5 + 2.2 * ((height - 152.4) / 2.54);
  }
}

async function collectUserInfo(chatId) {
  if (!userData.has(chatId)) {
    userData.set(chatId, {});
    userState.set(chatId, "waiting_for_gender");
    await bot.sendMessage(
      chatId,
      "Xin ch√†o! ƒê·ªÉ t√¥i c√≥ th·ªÉ t√≠nh to√°n c√°c ch·ªâ s·ªë s·ª©c kh·ªèe ch√≠nh x√°c cho b·∫°n, t√¥i c·∫ßn m·ªôt s·ªë th√¥ng tin c∆° b·∫£n.\n\nB·∫°n l√† nam hay n·ªØ? (nam/n·ªØ)"
    );
  }
}

async function handleUserInfo(chatId, text) {
  const state = userState.get(chatId);
  const data = userData.get(chatId);

  switch (state) {
    case "waiting_for_gender":
      const gender = text.toLowerCase();
      if (gender !== "nam" && gender !== "n·ªØ") {
        await bot.sendMessage(chatId, "Vui l√≤ng nh·∫≠p 'nam' ho·∫∑c 'n·ªØ'");
        return;
      }
      data.gender = gender;
      userState.set(chatId, "waiting_for_age");
      await bot.sendMessage(chatId, "B·∫°n bao nhi√™u tu·ªïi?");
      break;

    case "waiting_for_age":
      const age = parseInt(text);
      if (isNaN(age) || age <= 0 || age > 120) {
        await bot.sendMessage(chatId, "Vui l√≤ng nh·∫≠p tu·ªïi h·ª£p l·ªá (1-120)");
        return;
      }
      data.age = age;
      userState.set(chatId, "waiting_for_height");
      await bot.sendMessage(chatId, "Chi·ªÅu cao c·ªßa b·∫°n l√† bao nhi√™u cm?");
      break;

    case "waiting_for_height":
      const height = parseInt(text);
      if (isNaN(height) || height <= 0 || height > 250) {
        await bot.sendMessage(
          chatId,
          "Vui l√≤ng nh·∫≠p chi·ªÅu cao h·ª£p l·ªá (1-250 cm)"
        );
        return;
      }
      data.height = height;
      userState.set(chatId, "waiting_for_weight");
      await bot.sendMessage(chatId, "C√¢n n·∫∑ng c·ªßa b·∫°n l√† bao nhi√™u kg?");
      break;

    case "waiting_for_weight":
      const weight = parseFloat(text);
      if (isNaN(weight) || weight <= 0 || weight > 300) {
        await bot.sendMessage(
          chatId,
          "Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng h·ª£p l·ªá (1-300 kg)"
        );
        return;
      }
      data.weight = weight;
      userState.set(chatId, "waiting_for_activity");
      await bot.sendMessage(
        chatId,
        "M·ª©c ƒë·ªô v·∫≠n ƒë·ªông c·ªßa b·∫°n:\n1. √çt v·∫≠n ƒë·ªông (ng·ªìi nhi·ªÅu)\n2. V·∫≠n ƒë·ªông nh·∫π (1-3 l·∫ßn/tu·∫ßn)\n3. V·∫≠n ƒë·ªông v·ª´a (3-5 l·∫ßn/tu·∫ßn)\n4. V·∫≠n ƒë·ªông nhi·ªÅu (6-7 l·∫ßn/tu·∫ßn)\n5. V·∫≠n ƒë·ªông r·∫•t nhi·ªÅu (2 l·∫ßn/ng√†y)\n\nVui l√≤ng ch·ªçn s·ªë (1-5)"
      );
      break;

    case "waiting_for_activity":
      const activity = parseInt(text);
      if (isNaN(activity) || activity < 1 || activity > 5) {
        await bot.sendMessage(chatId, "Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn 5");
        return;
      }
      const activityLevels = [
        "sedentary",
        "light",
        "moderate",
        "active",
        "very_active",
      ];
      data.activityLevel = activityLevels[activity - 1];
      userState.set(chatId, "ready");

      // T√≠nh to√°n c√°c ch·ªâ s·ªë
      const heightInMeters = data.height / 100;
      data.bmi = (data.weight / (heightInMeters * heightInMeters)).toFixed(2);
      data.bmr = calculateBMR(
        data.weight,
        data.height,
        data.age,
        data.gender
      ).toFixed(2);
      data.tdee = calculateTDEE(
        data.bmr,
        ACTIVITY_LEVELS[data.activityLevel]
      ).toFixed(2);
      data.bodyFat = calculateBodyFat(
        data.weight,
        data.height,
        data.age,
        data.gender,
        data.bmi
      ).toFixed(2);
      data.idealWeight = calculateIdealWeight(data.height, data.gender).toFixed(
        2
      );

      const message =
        `C·∫£m ∆°n b·∫°n ƒë√£ cung c·∫•p th√¥ng tin!\n\nC√°c ch·ªâ s·ªë s·ª©c kh·ªèe c·ªßa b·∫°n:\n\n` +
        `üìä Ch·ªâ s·ªë c∆° b·∫£n:\n` +
        `- Tu·ªïi: ${data.age}\n` +
        `- Chi·ªÅu cao: ${data.height} cm\n` +
        `- C√¢n n·∫∑ng: ${data.weight} kg\n` +
        `- C√¢n n·∫∑ng l√Ω t∆∞·ªüng: ${data.idealWeight} kg\n\n` +
        `üìà Ch·ªâ s·ªë s·ª©c kh·ªèe:\n` +
        `- BMI: ${data.bmi}\n` +
        `- T·ª∑ l·ªá m·ª° c∆° th·ªÉ: ${data.bodyFat}%\n` +
        `- BMR (calo c∆° b·∫£n): ${data.bmr} kcal/ng√†y\n` +
        `- TDEE (t·ªïng nƒÉng l∆∞·ª£ng ti√™u hao): ${data.tdee} kcal/ng√†y\n\n` +
        `üí° L·ªùi khuy√™n:\n` +
        `- ƒê·ªÉ gi·∫£m c√¢n: ƒÇn √≠t h∆°n ${data.tdee} kcal/ng√†y\n` +
        `- ƒê·ªÉ tƒÉng c√¢n: ƒÇn nhi·ªÅu h∆°n ${data.tdee} kcal/ng√†y\n` +
        `- ƒê·ªÉ duy tr√¨ c√¢n n·∫∑ng: ƒÇn kho·∫£ng ${data.tdee} kcal/ng√†y\n\n` +
        `B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ dinh d∆∞·ª°ng kh√¥ng?`;

      await bot.sendMessage(chatId, message);
      break;
  }
}

async function handleUserQuestion(msg) {
  try {
    const chatId = msg.chat.id;

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p th√¥ng tin
    if (!userData.has(chatId) || userState.get(chatId) !== "ready") {
      await collectUserInfo(chatId);
      return;
    }

    const userInfo = userData.get(chatId);
    const question = msg.text;

    const context = `Th√¥ng tin ng∆∞·ªùi d√πng:
- Gi·ªõi t√≠nh: ${userInfo.gender}
- Tu·ªïi: ${userInfo.age}
- Chi·ªÅu cao: ${userInfo.height} cm
- C√¢n n·∫∑ng: ${userInfo.weight} kg
- BMI: ${userInfo.bmi}
- BMR: ${userInfo.bmr} kcal/ng√†y
- TDEE: ${userInfo.tdee} kcal/ng√†y
- T·ª∑ l·ªá m·ª° c∆° th·ªÉ: ${userInfo.bodyFat}%
- C√¢n n·∫∑ng l√Ω t∆∞·ªüng: ${userInfo.idealWeight} kg
- M·ª©c ƒë·ªô v·∫≠n ƒë·ªông: ${userInfo.activityLevel}

C√¢u h·ªèi: ${question}`;

    const result = await model.generateContent({
      contents: [
        {
          parts: [{ text: SYSTEM_PROMPT }, { text: context }],
        },
      ],
    });

    const response = await result.response;
    const answer = response.text();

    await bot.sendMessage(chatId, answer);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi:", error);
    await bot.sendMessage(
      msg.chat.id,
      "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay l√∫c n√†y."
    );
  }
}

// X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
bot.on("message", async (msg) => {
  if (!msg.text) return;

  const chatId = msg.chat.id;
  const state = userState.get(chatId);

  // N·∫øu ƒëang trong qu√° tr√¨nh thu th·∫≠p th√¥ng tin
  if (state && state !== "ready") {
    await handleUserInfo(chatId, msg.text);
    return;
  }

  // X·ª≠ l√Ω c√¢u h·ªèi th√¥ng th∆∞·ªùng
  await handleUserQuestion(msg);
});

process.on("SIGINT", () => {
  console.log("ƒêang d·ª´ng bot...");
  process.exit(0);
});

console.log("ü§ñ Bot ƒë√£ kh·ªüi ƒë·ªông!");
